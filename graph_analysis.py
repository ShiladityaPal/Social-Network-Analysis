# -*- coding: utf-8 -*-
"""Graph-Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1re0zIxluDyLBmpsL8H1D4jtGBSY8KjxC
"""

import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd

"""###Reading the downloaded real world graphs

"""

facebook = pd.read_csv('facebook_combined.txt', sep = ' ')
twitch = pd.read_csv('twitch/RU/musae_RU_edges.csv', sep = ',')
LastFM  = pd.read_csv('lasftm_asia/lastfm_asia_edges.csv', sep = ',')

facebook

twitch

LastFM

"""###Facebook


"""

G1= nx.from_pandas_edgelist(facebook, "Source", "Target")
print("Number of nodes:", G1.number_of_nodes())
print("Number of edges:", G1.number_of_edges())

G1_average_degree = nx.average_degree_connectivity(G1)
G1_overall_average_degree = sum(v for k, v in G1.degree()) / G1.number_of_nodes()

print("G1_Overall Average Degree:", round(G1_overall_average_degree,4))

G1_average_degree = nx.average_degree_connectivity(G1_gnp)
G1_overall_average_degree = sum(v for k, v in G1_gnp.degree()) / G1.number_of_nodes()

print("G1_gnp Overall Average Degree:", round(G1_overall_average_degree,4))

G1_average_degree = nx.average_degree_connectivity(G1_ws)
G1_overall_average_degree = sum(v for k, v in G1_ws.degree()) / G1.number_of_nodes()

print("G1_ws Overall Average Degree:", round(G1_overall_average_degree,4))

G1_gnp = nx.gnp_random_graph(G1.number_of_nodes(), 0.2, directed = False)

G1_ws = nx.watts_strogatz_graph(nx.number_of_nodes(G1), int(G1_overall_average_degree), 0.2)

nx.draw(G1, node_size=10, node_color='red')
plt.show()

nx.draw(G1_gnp, node_size=2, node_color='green')

nx.draw(G1_ws, node_size = 2, node_color='blue')

"""###Twitch"""

G2= nx.from_pandas_edgelist(twitch, "from", "to")
print("Number of nodes:", G2.number_of_nodes())
print("Number of edges:", G2.number_of_edges())

G2_average_degree = nx.average_degree_connectivity(G2)
G2_real_world_overall_average_degree = sum( v for k, v in G2.degree()) / G2.number_of_nodes()

print("G2_Overall Average Degree:", round(G2_real_world_overall_average_degree,4))

G2_average_degree = nx.average_degree_connectivity(G2_gnp)
G2_gnp_overall_average_degree = sum(v for k, v in G2_gnp.degree()) / G2_gnp.number_of_nodes()

print("G2_gnp Overall Average Degree:", round(G2_gnp_overall_average_degree,4))

G2_average_degree = nx.average_degree_connectivity(G1_ws)
G2_ws_overall_average_degree = sum(v for k, v in G2_ws.degree()) / G2_ws.number_of_nodes()

print("G2_ws Overall Average Degree:", round(G2_ws_overall_average_degree,4))

G2_gnp = nx.gnp_random_graph(G2.number_of_nodes(), 0.2, directed = False)

G2_ws = nx.watts_strogatz_graph(nx.number_of_nodes(G2), int(G2_overall_average_degree), 0.2)

nx.draw(G2, node_size = 2, node_color='red')

nx.draw(G2_gnp, node_size=2, node_color='green')

nx.draw(G2_ws, node_size = 2, node_color='blue')

"""###LastFM Asia"""

G3= nx.from_pandas_edgelist(LastFM, "node_1", 'node_2')
print("Number of nodes:", G3.number_of_nodes())
print("Number of edges:", G3.number_of_edges())

G3_average_degree = nx.average_degree_connectivity(G3)
G3_overall_average_degree = sum( v for k, v in G3.degree()) / G3.number_of_nodes()

print("G3_Overall Average Degree:", round(G3_overall_average_degree,4))

G3_average_degree = nx.average_degree_connectivity(G3_gnp)
G3_gnp_overall_average_degree = sum(v for k, v in G3_gnp.degree()) / G3.number_of_nodes()

print("G3_gnp Overall Average Degree:", round(G3_gnp_overall_average_degree,4))

G3_average_degree = nx.average_degree_connectivity(G3_ws)
G3_ws_overall_average_degree = sum(v for k, v in G3_ws.degree()) / G3_ws.number_of_nodes()
print("G3_ws Overall Average Degree:", round(G3_ws_overall_average_degree,4))

G3_gnp = nx.gnp_random_graph(G3.number_of_nodes(), 0.2, directed = False)

G3_ws = nx.watts_strogatz_graph(nx.number_of_nodes(G3), int(G3_overall_average_degree), 0.2)

nx.draw(G3, node_size = 2, node_color='red')

nx.draw(G3_gnp, node_size = 2, node_color='green')

nx.draw(G3_ws, node_size = 2, node_color='blue')

"""###Average Path Length"""

average_path_length_fb1 = nx.average_shortest_path_length(G1)
print('Real World facebook graph:', round(average_path_length_fb1,4))

average_path_length_fb2 = nx.average_clustering(G1_gnp)
print('G(n,p) facebook graph:', round(average_path_length_fb2,4))

average_path_length_fb3 = nx.average_clustering(G1_ws)
print('Watts Strogatz facebook graph:', round(average_path_length_fb3,4))


labels = ['Real-world', 'G(n,p)', 'Watts-Strogatz']
values = [average_path_length_fb1, average_path_length_fb2, average_path_length_fb3]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components(FACEBOOK)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

average_path_length_twitch1 = nx.average_shortest_path_length(G2)
print('Real World twitch graph:', round(average_path_length_twitch1,4))

average_path_length_twitch2 = nx.average_clustering(G2_gnp)
print('G(n,p) twitch graph:', round(average_path_length_twitch2,4))

average_path_length_twitch3 = nx.average_clustering(G2_ws)
print('Watts Strogatz twitch graph:', round(average_path_length_twitch3,4))


labels = ['Real-world', 'G(n,p)', 'Watts-Strogatz']
values = [average_path_length_twitch1, average_path_length_twitch2, average_path_length_twitch3]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components(TWITCH)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

average_path_length_lastfm1 = nx.average_shortest_path_length(G3)
print('Real World LastFM graph:', round(average_path_length_lastfm1,4))

average_path_length_lastfm2 = nx.average_clustering(G3_gnp)
print('G(n,p) LastFM graph:', round(average_path_length_lastfm2,4))

average_path_length_lastfm3 = nx.average_clustering(G3_ws)
print('Watts Strogatz LastFM graph:', round(average_path_length_lastfm3,4))


labels = ['Real-world', 'G(n,p)', 'Watts-Strogatz']
values = [average_path_length_lastfm1, average_path_length_lastfm2, average_path_length_lastfm3]

# Plotting the histogram
plt.figure(figsize=(50, 20))

plt.bar(labels, values, color=['red', 'green', 'blue'])
plt.ylabel('Average Shortest Path Length', fontsize=30)
plt.title('Average Shortest Path Lengths of Largest Connected Components(LASTFM)', fontsize=30)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.xticks(fontsize=14, rotation=30, ha="right")
plt.show()

"""DEGREE CENTRALITY"""

#DEGREE CENTRALITY OF FACEBOOK

#real world
degree_centrality_fb1 = dict(sorted(nx.degree_centrality(G1).items()))
centrality_values_1 = degree_centrality_fb1.values()
frequency_1 = nx.degree_histogram(G1)

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=30)
plt.title('Degree Centrality of Real World Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
degree_centrality_fb2 = dict(sorted(nx.degree_centrality(G1_gnp).items()))
centrality_values_2 = degree_centrality_fb2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=30)
plt.title('Degree Centrality of G(n,p) Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
degree_centrality_fb3 = dict(sorted(nx.degree_centrality(G1_ws).items()))
centrality_values_3 = degree_centrality_fb3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=30)
plt.title('Degree Centrality of Watts-Strogatz Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_facebook_degree_centrality = (sum(degree_centrality_fb1.values())/G1.number_of_nodes())
print("Average degree centrality of Real world Facebook Graph:", real_world_facebook_degree_centrality)

gnp_facebook_degree_centrality = (sum(degree_centrality_fb2.values())/G1_gnp.number_of_nodes())
print("Average degree centrality of G(n,p) Facebook Graph:",gnp_facebook_degree_centrality)

ws_facebook_degree_centrality = (sum(degree_centrality_fb3.values())/G1_ws.number_of_nodes())
print("Average degree centrality of Watts Strogatz Facebook Graph:", ws_facebook_degree_centrality)

#DEGREE CENTRALITY OF TWITCH

#real world
degree_centrality_twitch1 = dict(sorted(nx.degree_centrality(G2).items()))
centrality_values_1 = degree_centrality_twitch1.values()

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=30)
plt.title('Degree Centrality of Real World Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
degree_centrality_twitch2 = dict(sorted(nx.degree_centrality(G2_gnp).items()))
centrality_values_2 = degree_centrality_twitch2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=30)
plt.title('Degree Centrality of G(n,p) Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
degree_centrality_twitch3 = dict(sorted(nx.degree_centrality(G3_ws).items()))
centrality_values_3 = degree_centrality_twitch3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=30)
plt.title('Degree Centrality of Watts-Strogatz Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_twitch_degree_centrality = (sum(degree_centrality_twitch1.values())/G2.number_of_nodes())
print("Average degree centrality of Real world Twitch Graph:", real_world_twitch_degree_centrality)

gnp_twitch_degree_centrality = (sum(degree_centrality_twitch2.values())/G2_gnp.number_of_nodes())
print("Average degree centrality of G(n,p) Twitch Graph:",gnp_twitch_degree_centrality)

ws_twitch_degree_centrality = (sum(degree_centrality_twitch3.values())/G2_ws.number_of_nodes())
print("Average degree centrality of Watts Strogatz Twitch Graph:", ws_twitch_degree_centrality)

#DEGREE CENTRALITY OF LASTFM

#real world
degree_centrality_lastfm1 = dict(sorted(nx.degree_centrality(G3).items()))
centrality_values_1 = degree_centrality_lastfm1.values()


plt.hist(centrality_values_1, color='red', bins=30)
plt.title('Degree Centrality of Real World LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#g(n,p)
degree_centrality_lastfm2 = dict(sorted(nx.degree_centrality(G3_gnp).items()))
centrality_values_2 = degree_centrality_lastfm2.values()

plt.hist(centrality_values_2, color='green', bins=30)
plt.title('Degree Centrality of G(n,p) LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#watts-strogatz
degree_centrality_lastfm3 = dict(sorted(nx.degree_centrality(G3_ws).items()))
centrality_values_3 = degree_centrality_lastfm3.values()

plt.hist(centrality_values_3, color='blue', bins=30)
plt.title('Degree Centrality of Watts-Strogatz LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_lastfm_degree_centrality = (sum(degree_centrality_lastfm1.values())/G3.number_of_nodes())
print("Average degree centrality of Real world LastFM Graph:", real_world_lastfm_degree_centrality)

gnp_lastfm_degree_centrality = (sum(degree_centrality_lastfm2.values())/G3_gnp.number_of_nodes())
print("Average degree centrality of G(n,p) LastFM Graph:",gnp_lastfm_degree_centrality)

ws_lastfm_degree_centrality = (sum(degree_centrality_lastfm3.values())/G3_ws.number_of_nodes())
print("Average degree centrality of Watts Strogatz LastFM Graph:", ws_lastfm_degree_centrality)

"""BETWEENNESS CENTRALITY"""

#BETWEENNESS CENTRALITY OF FACEBOOK

#real world
betweenness_centrality_fb1 = dict(sorted(nx.betweenness_centrality(G1).items()))
centrality_values_1 = betweenness_centrality_fb1.values()

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=100)
plt.title('betweenness Centrality of Real World Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
betweenness_centrality_fb2 = dict(sorted(nx.betweenness_centrality(G1_gnp).items()))
centrality_values_2 = betweenness_centrality_fb2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=100)
plt.title('betweenness Centrality of G(n,p) Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
betweenness_centrality_fb3 = dict(sorted(nx.betweenness_centrality(G1_ws).items()))
centrality_values_3 = betweenness_centrality_fb3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=100)
plt.title('betweenness Centrality of Watts-Strogatz Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_facebook_betweenness_centrality = (sum(betweenness_centrality_fb1.values())/G1.number_of_nodes())
print("Average betweenness centrality of Real world Facebook Graph:", real_world_facebook_betweenness_centrality)

gnp_facebook_betweenness_centrality = (sum(betweenness_centrality_fb2.values())/G1_gnp.number_of_nodes())
print("Average betweenness centrality of G(n,p) Facebook Graph:", gnp_facebook_betweenness_centrality)

ws_facebook_betweeness_centrality = (sum(betweenness_centrality_fb3.values())/G1_ws.number_of_nodes())
print("Average betweenness centrality of Watts Strogatz Facebook Graph:", ws_facebook_betweeness_centrality)

#BETWEENNESS CENTRALITY OF TWITCH

#real world
betweenness_centrality_twitch1 = dict(sorted(nx.betweenness_centrality(G2).items()))
centrality_values_1 = betweenness_centrality_twitch1.values()

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=100)
plt.title('betweenness Centrality of Real World Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
betweenness_centrality_twitch2 = dict(sorted(nx.betweenness_centrality(G2_gnp).items()))
centrality_values_2 = betweenness_centrality_twitch2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=100)
plt.title('betweenness Centrality of G(n,p) Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
betweenness_centrality_twitch3 = dict(sorted(nx.betweenness_centrality(G3_ws).items()))
centrality_values_3 = betweenness_centrality_twitch3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=100)
plt.title('betweenness Centrality of Watts-Strogatz Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_twitch_betweenness_centrality = (sum(betweenness_centrality_twitch1.values())/G2.number_of_nodes())
print("Average betweenness centrality of Real world Twitch Graph:", real_world_twitch_betweenness_centrality)

gnp_twitch_betweenness_centrality = (sum(betweenness_centrality_twitch2.values())/G2_gnp.number_of_nodes())
print("Average betweenness centrality of G(n,p) Twitch Graph:",gnp_twitch_betweenness_centrality)

ws_twitch_betweeness_centrality = (sum(betweenness_centrality_twitch3.values())/G2_ws.number_of_nodes())
print("Average betweenness centrality of Watts Strogatz Twitch Graph:", ws_twitch_betweeness_centrality)

#BETWEENNESS CENTRALITY OF LASTFM

#real world
betweenness_centrality_lastfm1 = dict(sorted(nx.betweenness_centrality(G3).items()))
centrality_values_1 = betweenness_centrality_lastfm1.values()


plt.hist(centrality_values_1, color='red', bins=30)
plt.title('betweenness Centrality of Real World LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#g(n,p)
betweenness_centrality_lastfm2 = dict(sorted(nx.betweenness_centrality(G3_gnp).items()))
centrality_values_2 = betweenness_centrality_lastfm2.values()

plt.hist(centrality_values_2, color='green', bins=30)
plt.title('betweenness Centrality of G(n,p) LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#watts-strogatz
betweenness_centrality_lastfm3 = dict(sorted(nx.betweenness_centrality(G3_ws).items()))
centrality_values_3 = betweenness_centrality_lastfm3.values()

plt.hist(centrality_values_3, color='blue', bins=30)
plt.title('betweenness Centrality of Watts-Strogatz LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_lastfm_betweenness_centrality = (sum(betweenness_centrality_lastfm1.values())/G3.number_of_nodes())
print("Average degree centrality of Real world LastFM Graph:", real_world_lastfm_betweenness_centrality)

gnp_lastfm_betweenness_centrality = (sum(betweenness_centrality_lastfm2.values())/G3_gnp.number_of_nodes())
print("Average degree centrality of G(n,p) LastFM Graph:",gnp_lastfm_betweenness_centrality)

ws_lastfm_betweenness_centrality = (sum(betweenness_centrality_lastfm3.values())/G3_ws.number_of_nodes())
print("Average degree centrality of Watts Strogatz LastFM Graph:", ws_lastfm_betweenness_centrality)

"""CLOSENESS CENTRALITY"""

#CLOSENESS CENTRALITY OF FACEBOOK

#real world
closeness_centrality_fb1 = dict(sorted(nx.closeness_centrality(G1).items()))
centrality_values_1 = closeness_centrality_fb1.values()

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=100)
plt.title('Closeness Centrality of Real World Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
closeness_centrality_fb2 = dict(sorted(nx.closeness_centrality(G1_gnp).items()))
centrality_values_2 = closeness_centrality_fb2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=100)
plt.title('Closeness Centrality of G(n,p) Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
closeness_centrality_fb3 = dict(sorted(nx.closeness_centrality(G1_ws).items()))
centrality_values_3 = closeness_centrality_fb3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=100)
plt.title('Closeness Centrality of Watts-Strogatz Facebook graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_facebook_closeness_centrality = (sum(closeness_centrality_fb1.values())/G1.number_of_nodes())
print("Average closeness centrality of Real world Facebook Graph:", real_world_facebook_closeness_centrality)

gnp_facebook_closeness_centrality = (sum(closeness_centrality_fb2.values())/G1_gnp.number_of_nodes())
print("Average closeness centrality of G(n,p) Facebook Graph:", gnp_facebook_closeness_centrality)

ws_facebook_closeness_centrality = (sum(closeness_centrality_fb3.values())/G1_ws.number_of_nodes())
print("Average closenesss centrality of Watts Strogatz Facebook Graph:", ws_facebook_closeness_centrality)

#CLOSENESS CENTRALITY OF TWITCH

#real world
closeness_centrality_twitch1 = dict(sorted(nx.closeness_centrality(G2).items()))
centrality_values_1 = closeness_centrality_twitch1.values()

#plt.subplot(1,2,1)
plt.hist(centrality_values_1, color='red', bins=100)
plt.title('Closeness Centrality of Real World Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#g(n,p)
closeness_centrality_twitch2 = dict(sorted(nx.closeness_centrality(G2_gnp).items()))
centrality_values_2 = closeness_centrality_twitch2.values()

#plt.subplot(1,2,2)
plt.hist(centrality_values_2, color='green', bins=100)
plt.title('Closeness Centrality of G(n,p) Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()

#watts-strogatz
closeness_centrality_twitch3 = dict(sorted(nx.closeness_centrality(G2_ws).items()))
centrality_values_3 = closeness_centrality_twitch3.values()

#plt.subplot(2,2,2)
plt.hist(centrality_values_3, color='blue', bins=100)
plt.title('Closeness Centrality of Watts-Strogatz Twitch graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_twitch_closeness_centrality = (sum(closeness_centrality_twitch1.values())/G2.number_of_nodes())
print("Average betweenness centrality of Real world Facebook Graph:", real_world_twitch_closeness_centrality)

gnp_twitch_closeness_centrality = (sum(closeness_centrality_twitch2.values())/G2_gnp.number_of_nodes())
print("Average betweenness centrality of G(n,p) Facebook Graph:", gnp_twitch_closeness_centrality)

ws_twitch_closeness_centrality = (sum(closeness_centrality_twitch3.values())/G2_ws.number_of_nodes())
print("Average betweenness centrality of Watts Strogatz Facebook Graph:", ws_twitch_closeness_centrality)

#CLOSENESS CENTRALITY OF LASTFM

#real world
closeness_centrality_lastfm1 = dict(sorted(nx.closeness_centrality(G3).items()))
centrality_values_1 = closeness_centrality_lastfm1.values()


plt.hist(centrality_values_1, color='red', bins=100)
plt.title('closeness Centrality of Real World LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#g(n,p)
closeness_centrality_lastfm2 = dict(sorted(nx.closeness_centrality(G3_gnp).items()))
centrality_values_2 = closeness_centrality_lastfm2.values()

plt.hist(centrality_values_2, color='green', bins=100)
plt.title('closeness Centrality of G(n,p) LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')
plt.show()


#watts-strogatz
closeness_centrality_lastfm3 = dict(sorted(nx.closeness_centrality(G3_ws).items()))
centrality_values_3 = closeness_centrality_lastfm3.values()

plt.hist(centrality_values_3, color='blue', bins=100)
plt.title('closeness Centrality of Watts-Strogatz LastFM graph')
plt.xlabel('Centrality Value')
plt.ylabel('Frequency')

plt.tight_layout()

plt.show()

real_world_lastfm_closeness_centrality = (sum(closeness_centrality_lastfm1.values())/G3.number_of_nodes())
print("Average closeness centrality of Real world LastFM Graph:", real_world_lastfm_degree_centrality)

gnp_lastfm_closeness_centrality = (sum(closeness_centrality_lastfm2.values())/G3_gnp.number_of_nodes())
print("Average closeness centrality of G(n,p) LastFM Graph:",gnp_lastfm_degree_centrality)

ws_lastfm_closeness_centrality = (sum(closeness_centrality_lastfm3.values())/G3_ws.number_of_nodes())
print("Average closeness centrality of Watts Strogatz LastFM Graph:", ws_lastfm_degree_centrality)

clustering_coefficient_fb1 = nx.average_clustering(G1)
clustering_coefficient_fb2 = nx.average_clustering(G1_gnp)
clustering_coefficient_fb3 = nx.average_clustering(G1_ws)

print("Average clustering coefficient of Real World Facebook Graph: ", clustering_coefficient_fb1)
print("Average clustering coefficient of G(n,p) Facebook Graph: ", clustering_coefficient_fb2)
print("Average clusteing coefficient of Wartz Strogatz Facebook Graph: ", clustering_coefficient_fb3)

clustering_coefficient_twitch1 = nx.average_clustering(G2)
clustering_coefficient_twitch2 = nx.average_clustering(G2_gnp)
clustering_coefficient_twitch3 = nx.average_clustering(G2_ws)

print("Average clustering coefficient of Real World Facebook Graph: ", clustering_coefficient_twitch1)
print("Average clustering coefficient of G(n,p) Facebook Graph: ", clustering_coefficient_twitch2)
print("Average clusteing coefficient of Wartz Strogatz Facebook Graph: ", clustering_coefficient_twitch3)

clustering_coefficient_lastfm1 = nx.average_clustering(G3)
clustering_coefficient_lastfm2 = nx.average_clustering(G3_gnp)
clustering_coefficient_lastfm3 = nx.average_clustering(G3_ws)

print("Average clustering coefficient of Real World Facebook Graph: ", clustering_coefficient_lastfm1)
print("Average clustering coefficient of G(n,p) Facebook Graph: ", clustering_coefficient_lastfm2)
print("Average clusteing coefficient of Wartz Strogatz Facebook Graph: ", clustering_coefficient_lastfm3)